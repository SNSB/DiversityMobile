
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `DiversityService.Properties.Settings.DiversityMobileConnectionString`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=141.84.65.107,5432;Initial Catalog=DiversityMobile;Persist Security Info=True;User ID=Rollinger;password=**zapped**;Application Name=EntityFramework`
//     Schema:                 ``
//     Include Views:          `False`

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace DiversityMobileEntities
{
	public partial class DiversityMobileEntities : Database
	{
		public DiversityMobileEntities() 
			: base("DiversityService.Properties.Settings.DiversityMobileConnectionString")
		{
			CommonConstruct();
		}

		public DiversityMobileEntities(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			DiversityMobileEntities GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static DiversityMobileEntities GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new DiversityMobileEntities();
        }

		[ThreadStatic] static DiversityMobileEntities _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
		public class Record<T> where T:new()
		{
			public static DiversityMobileEntities repo { get { return DiversityMobileEntities.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
			
			private Dictionary<string,bool> ModifiedColumns;
			private void OnLoaded()
			{
				ModifiedColumns = new Dictionary<string,bool>();
			}
			protected void MarkColumnModified(string column_name)
			{
				if (ModifiedColumns!=null)
					ModifiedColumns[column_name]=true;
			}
			public int Update() 
			{ 
				if (ModifiedColumns==null)
					return repo.Update(this); 

				int retv = repo.Update(this, ModifiedColumns.Keys);
				ModifiedColumns.Clear();
				return retv;
			}
			public void Save() 
			{ 
				if (repo.IsNew(this))
					repo.Insert(this);
				else
					Update();
			}
		}
	}
	

    
	[TableName("ProjectTaxonLists")]
	[PrimaryKey("ProjectID", autoIncrement=false)]
	[ExplicitColumns]
    public partial class ProjectTaxonList : DiversityMobileEntities.Record<ProjectTaxonList>  
    {
        [Column] 
		public int ProjectID 
		{ 
			get
			{
				return _ProjectID;
			}
			set
			{
				_ProjectID = value;
				MarkColumnModified("ProjectID");
			}
		}
		int _ProjectID;

        [Column] 
		public string TaxonList 
		{ 
			get
			{
				return _TaxonList;
			}
			set
			{
				_TaxonList = value;
				MarkColumnModified("TaxonList");
			}
		}
		string _TaxonList;

        [Column] 
		public string TaxonomicGroup 
		{ 
			get
			{
				return _TaxonomicGroup;
			}
			set
			{
				_TaxonomicGroup = value;
				MarkColumnModified("TaxonomicGroup");
			}
		}
		string _TaxonomicGroup;

	}
    
	[TableName("TermsLists")]
	[PrimaryKey("PropertyID", autoIncrement=false)]
	[ExplicitColumns]
    public partial class TermsList : DiversityMobileEntities.Record<TermsList>  
    {
        [Column] 
		public int PropertyID 
		{ 
			get
			{
				return _PropertyID;
			}
			set
			{
				_PropertyID = value;
				MarkColumnModified("PropertyID");
			}
		}
		int _PropertyID;

        [Column] 
		public string Datasource 
		{ 
			get
			{
				return _Datasource;
			}
			set
			{
				_Datasource = value;
				MarkColumnModified("Datasource");
			}
		}
		string _Datasource;

	}
    
	[TableName("UserTermsLists")]
	[PrimaryKey("Login", autoIncrement=false)]
	[ExplicitColumns]
    public partial class UserTermsList : DiversityMobileEntities.Record<UserTermsList>  
    {
        [Column] 
		public string Login 
		{ 
			get
			{
				return _Login;
			}
			set
			{
				_Login = value;
				MarkColumnModified("Login");
			}
		}
		string _Login;

        [Column] 
		public int PropertyID 
		{ 
			get
			{
				return _PropertyID;
			}
			set
			{
				_PropertyID = value;
				MarkColumnModified("PropertyID");
			}
		}
		int _PropertyID;

	}
    
	[TableName("UserTaxonLists")]
	[PrimaryKey("Login", autoIncrement=false)]
	[ExplicitColumns]
    public partial class UserTaxonList : DiversityMobileEntities.Record<UserTaxonList>  
    {
        [Column] 
		public string Login 
		{ 
			get
			{
				return _Login;
			}
			set
			{
				_Login = value;
				MarkColumnModified("Login");
			}
		}
		string _Login;

        [Column] 
		public int ProjectID 
		{ 
			get
			{
				return _ProjectID;
			}
			set
			{
				_ProjectID = value;
				MarkColumnModified("ProjectID");
			}
		}
		int _ProjectID;

        [Column] 
		public string TaxonomicGroup 
		{ 
			get
			{
				return _TaxonomicGroup;
			}
			set
			{
				_TaxonomicGroup = value;
				MarkColumnModified("TaxonomicGroup");
			}
		}
		string _TaxonomicGroup;

	}
    
	[TableName("TaxRef_UBT_Herbivores")]
	[ExplicitColumns]
    public partial class TaxRef_UBT_Herbivore : DiversityMobileEntities.Record<TaxRef_UBT_Herbivore>  
    {
        [Column] 
		public string NameURI 
		{ 
			get
			{
				return _NameURI;
			}
			set
			{
				_NameURI = value;
				MarkColumnModified("NameURI");
			}
		}
		string _NameURI;

        [Column] 
		public string TaxonNameCache 
		{ 
			get
			{
				return _TaxonNameCache;
			}
			set
			{
				_TaxonNameCache = value;
				MarkColumnModified("TaxonNameCache");
			}
		}
		string _TaxonNameCache;

        [Column] 
		public string TaxonNameSinAuthors 
		{ 
			get
			{
				return _TaxonNameSinAuthors;
			}
			set
			{
				_TaxonNameSinAuthors = value;
				MarkColumnModified("TaxonNameSinAuthors");
			}
		}
		string _TaxonNameSinAuthors;

        [Column] 
		public string GenusOrSupragenericName 
		{ 
			get
			{
				return _GenusOrSupragenericName;
			}
			set
			{
				_GenusOrSupragenericName = value;
				MarkColumnModified("GenusOrSupragenericName");
			}
		}
		string _GenusOrSupragenericName;

        [Column] 
		public string SpeciesEpithet 
		{ 
			get
			{
				return _SpeciesEpithet;
			}
			set
			{
				_SpeciesEpithet = value;
				MarkColumnModified("SpeciesEpithet");
			}
		}
		string _SpeciesEpithet;

        [Column] 
		public string InfraspecificEpithet 
		{ 
			get
			{
				return _InfraspecificEpithet;
			}
			set
			{
				_InfraspecificEpithet = value;
				MarkColumnModified("InfraspecificEpithet");
			}
		}
		string _InfraspecificEpithet;

        [Column] 
		public string Synonymy 
		{ 
			get
			{
				return _Synonymy;
			}
			set
			{
				_Synonymy = value;
				MarkColumnModified("Synonymy");
			}
		}
		string _Synonymy;

        [Column] 
		public string Family 
		{ 
			get
			{
				return _Family;
			}
			set
			{
				_Family = value;
				MarkColumnModified("Family");
			}
		}
		string _Family;

        [Column] 
		public string Order 
		{ 
			get
			{
				return _Order;
			}
			set
			{
				_Order = value;
				MarkColumnModified("Order");
			}
		}
		string _Order;

        [Column("class")] 
		public string hvClass 
		{ 
			get
			{
				return _hvClass;
			}
			set
			{
				_hvClass = value;
				MarkColumnModified("class");
			}
		}
		string _hvClass;

	}
}


