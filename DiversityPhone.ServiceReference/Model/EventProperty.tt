<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="ReactiveModel.ttinclude" #>
<#@ import namespace="System" #>
<#
   
#>

using System;
using System.Linq;
using ReactiveUI;
using Microsoft.Phone.Data.Linq.Mapping;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using Svc = DiversityPhone.DiversityService;

namespace DiversityPhone.Model
{	
	[Table]
	public class EventProperty : ReactiveObject, IModifyable
	{
#pragma warning disable 0169
		[Column(IsVersion = true)]
		private Binary version;
#pragma warning restore 0169

<# Row("int", "EventID", RowKind.Key); #>   
<# Row("int", "PropertyID", RowKind.Key); #> 

<# Row("string", "DisplayText"); #>
<# Row("string", "PropertyUri"); #>
  
<# Row("ModificationState", "ModificationState"); #>
  
		 public EventProperty()
        {            
            this.ModificationState = ModificationState.New;
        }


        public static IQueryOperations<EventProperty> Operations
        {
            get;
            private set;
        }

        static EventProperty()
        {
            Operations = new QueryOperations<EventProperty>(
                //Smallerthan
                          (q, cep) => q.Where(row => row.EventID < cep.EventID || row.PropertyID < cep.PropertyID),
                //Equals
                          (q, cep) => q.Where(row => row.EventID == cep.EventID && row.PropertyID == cep.PropertyID),
                //Orderby
                          (q) => from cep in q
                                 orderby cep.EventID, cep.PropertyID
                                 select cep,
                //FreeKey
                          (q, cep) =>
                          {
                              //Not Applicable
                          });
        }
    }
}
 
