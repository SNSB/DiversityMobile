<#@ template hostspecific="True" debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#+ 
	[Flags]
	enum RowKind
	{
		None = 0x0,
		Nullable = 0x01,
		NoUpdateCheck = 0x02,
		Key = 0x04
	}


	void Row(string type, string name, RowKind rowkind = RowKind.None)
	{
		this.ReactiveRow(type, name, rowkind);
    }

	void ReactiveRow(string type, string name, RowKind rowkind = RowKind.None){
		string field = "_" + name;
		string attributes = string.Join(",", new string[]
			{
				((rowkind & RowKind.Key) != RowKind.None) ? "IsPrimaryKey=true" : "",
				((rowkind & RowKind.Nullable) != RowKind.None) ? "CanBeNull=true" : "",
				((rowkind & RowKind.NoUpdateCheck) != RowKind.None) ? "UpdateCheck=UpdateCheck.Never" : ""
            }.Where(x => !string.IsNullOrWhiteSpace(x)));
		attributes = (attributes.Length > 0) ? string.Format("({0})", attributes) : "";
					
		#>		
		private <#=type#> <#= field #>;
		[Column<#= attributes #>]
		public <#=type#> <#=name#>
		{
			get { return <#= field #>; }
			set 
			{
				if (<#= field #> != value)
				{
					this.raisePropertyChanging("<#=name#>");
					<#= field #> = value;
					this.raisePropertyChanged("<#=name#>");
				}  
			}
		}
		<#+
	}	
#>