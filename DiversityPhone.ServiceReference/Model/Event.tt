<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="ReactiveModel.ttinclude" #>
<#@ import namespace="System" #>
<#
   
#>

using System;
using System.Linq;
using ReactiveUI;
using Microsoft.Phone.Data.Linq.Mapping;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using Svc = DiversityPhone.DiversityService;

namespace DiversityPhone.Model
{	
	[Table]
	public class Event : ReactiveObject, ILocalizable, IModifyable, IMultimediaOwner
	{
<# Row("int", "EventID", RowKind.Key); #>   
<# Row("int?", "SeriesID", RowKind.Nullable); #>   
<# Row("DateTime", "CollectionDate", RowKind.NoUpdateCheck); #>    
<# Row("string", "LocalityDescription"); #>
<# Row("string", "HabitatDescription"); #>
<# Row("double?", "Altitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
<# Row("double?", "Latitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
<# Row("double?", "Longitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
<# Row("DateTime?", "DeterminationDate", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
<# Row("ModificationState", "ModificationState"); #>

<# Row("int?", "DiversityCollectionEventID", RowKind.Nullable); #>   
<# Row("int?", "DiversityCollectionSeriesID", RowKind.Nullable); #>  

		
		private EntitySet<Specimen> _Specimen = new EntitySet<Specimen>();
		[Association(Storage = "_Specimen", ThisKey="EventID", OtherKey = "EventID", DeleteRule="CASCADE" )]
		public EntitySet<Specimen> Specimen
		{
			get { return this._Specimen; }
			set { this._Specimen.Assign(value); }
		}

		private EntitySet<EventProperty> _Properties = new EntitySet<EventProperty>();
        [Association(Storage = "_Properties", ThisKey = "EventID", OtherKey = "EventID")]
        public EntitySet<EventProperty> Properties
        {
            get { return this._Properties; }
            set { this._Properties.Assign(value); }
        }
  
		public Event()
        {
            this.SeriesID = null;
            this.CollectionDate = DateTime.Now;            
            this.ModificationState = ModificationState.New;
		}

       
        public static IQueryOperations<Event> Operations
        {
            get;
            private set;
        }

        static Event()
        {
            Operations = new QueryOperations<Event>(
                //Smallerthan
                          (q, ev) => q.Where(row => row.EventID < ev.EventID),
                //Equals
                          (q, ev) => q.Where(row => row.EventID == ev.EventID),
                //Orderby
                          (q) => q.OrderBy(ev => ev.EventID),
                //FreeKey
                          (q, ev) =>
                          {
                              ev.EventID = QueryOperations<Event>.FindFreeIntKey(q, row => row.EventID);
                          });
        }       

        public ReferrerType OwnerType
        {
            get { return ReferrerType.Event; }
        }


        public int OwnerID
        {
            get { return EventID; }
        }


		public static Svc.Event ConvertToServiceObject(Event ev)
        {
            Svc.Event export = new Svc.Event();
            if (ev.DiversityCollectionEventID.HasValue)
                export.DiversityCollectionEventID = ev.DiversityCollectionEventID.Value;
            else
                export.DiversityCollectionEventID = Int32.MinValue;
            export.DiversityCollectionSeriesID = ev.DiversityCollectionSeriesID;
            export.Altitude = ev.Altitude;
            export.CollectionDate = ev.CollectionDate;
            export.DeterminationDate = ev.DeterminationDate;
            export.EventID = ev.EventID;
            export.HabitatDescription = ev.HabitatDescription;
            export.Latitude = ev.Latitude;
            export.LocalityDescription = ev.LocalityDescription;            
            export.Longitude = ev.Longitude;
            export.SeriesID = ev.SeriesID;
            return export;
        }
    }	
}
 
