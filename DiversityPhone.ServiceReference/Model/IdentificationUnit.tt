<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="ReactiveModel.ttinclude" #>
<#@ import namespace="System" #>
<#
   
#>

using System;
using System.Linq;
using ReactiveUI;
using Microsoft.Phone.Data.Linq.Mapping;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using Svc = DiversityPhone.DiversityService;

namespace DiversityPhone.Model
{	
	[Table]
	[Index(Columns="RelatedUnitID", IsUnique=false, Name="relunit_idx")] 
	public class IdentificationUnit : ReactiveObject, ILocalizable, IModifyable, IMultimediaOwner
	{  
<# Row("int", "UnitID", RowKind.Key); #>   
<# Row("int", "SpecimenID"); #> 
<# Row("int?", "RelatedUnitID", RowKind.Nullable); #> 
<# Row("bool", "OnlyObserved"); #>    
<# Row("string", "TaxonomicGroup"); #>
<# Row("string", "RelationType"); #>
<# Row("string", "Qualification"); #>
<# Row("string", "WorkingName"); #>
<# Row("string", "IdentificationUri"); #>
<# Row("DateTime", "AnalysisDate"); #>

<# Row("double?", "Altitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
<# Row("double?", "Latitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
<# Row("double?", "Longitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
 
<# Row("ModificationState", "ModificationState"); #>

<# Row("int?", "DiversityCollectionSpecimenID", RowKind.Nullable); #>   
<# Row("int?", "DiversityCollectionUnitID", RowKind.Nullable); #> 
<# Row("int?", "DiversityCollectionRelatedUnitID", RowKind.Nullable); #> 
		  
		public IdentificationUnit()
        {
            this.ModificationState = ModificationState.New;            

            this.AnalysisDate = DateTime.Now;//TODO Something useful?
            this.RelatedUnitID = null;
            this.DiversityCollectionUnitID = null;
            this.DiversityCollectionSpecimenID = null;
            this.DiversityCollectionRelatedUnitID = null;
            
        }

        public static IQueryOperations<IdentificationUnit> Operations
        {
            get;
            private set;
        }

        static IdentificationUnit()
        {
            Operations = new QueryOperations<IdentificationUnit>(
                //Smallerthan
                          (q, iu) => q.Where(row => row.UnitID < iu.UnitID),
                //Equals
                          (q, iu) => q.Where(row => row.UnitID == iu.UnitID),
                //Orderby
                          (q) => q.OrderBy(iu => iu.UnitID),
                //FreeKey
                          (q, iu) =>
                          {
                              iu.UnitID = QueryOperations<IdentificationUnit>.FindFreeIntKey(q, row => row.UnitID);
                          });
        }

        public static Svc.IdentificationUnit ConvertToServiceObject(IdentificationUnit iu)
        {
            Svc.IdentificationUnit export = new Svc.IdentificationUnit();
            if (iu.DiversityCollectionUnitID != null)
                export.DiversityCollectionUnitID = (int)iu.DiversityCollectionUnitID;
            else
                export.DiversityCollectionUnitID = Int32.MinValue;
            export.DiversityCollectionSpecimenID = iu.DiversityCollectionSpecimenID;
            export.DiversityCollectionRelatedUnitID = iu.DiversityCollectionRelatedUnitID;
            export.Altitude = iu.Altitude;
            export.AnalysisDate = iu.AnalysisDate;
            //export.ColonisedSubstratePart = iu.ColonisedSubstratePart;
            //export.FamilyCache=iu. Is not supported on clientModel
            //export.Gender = iu.Gender;
            export.IdentificationUri = iu.IdentificationUri;
            export.LastIdentificationCache = iu.WorkingName;
			export.Qualification = iu.Qualification;
            export.Latitude = iu.Latitude;
            //export.LifeStage = iu.LifeStage;            
            export.Longitude = iu.Longitude;
            export.OnlyObserved = iu.OnlyObserved;
            //export.OrderCache=iu.Is not supported on clientModel
            export.RelatedUnitID = iu.RelatedUnitID;
            export.RelationType = iu.RelationType;
            export.SpecimenID = iu.SpecimenID;
            export.TaxonomicGroup = iu.TaxonomicGroup;
            export.UnitID = iu.UnitID;
            return export;
        }


        public ReferrerType OwnerType
        {
            get { return ReferrerType.IdentificationUnit; }
        }

        public int OwnerID
        {
            get { return UnitID; }
        }
    }	
}
 
