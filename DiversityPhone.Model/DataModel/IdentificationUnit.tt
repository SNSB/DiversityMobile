<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="ReactiveModel.ttinclude" #>
<#@ import namespace="System" #>
<#
   
#>

using System;
using System.Linq;
using ReactiveUI;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using Microsoft.Phone.Data.Linq.Mapping;

namespace DiversityPhone.Model
{	
	[Table]
#if !TEST
	[Index(Columns="RelatedUnitID", IsUnique=false, Name="relunit_idx")] 
#endif
	public class IdentificationUnit : ReactiveObject, ILocalizable, IModifyable, IMultimediaOwner
	{  
#pragma warning disable 0169
		[Column(IsVersion = true)]
		private Binary version;
#pragma warning restore 0169

<# Row("int", "UnitID", RowKind.Key); #>  
<# Row("int?", "CollectionUnitID", RowKind.Nullable); #>    
<# Row("int", "SpecimenID"); #> 
<# Row("int?", "RelatedUnitID", RowKind.Nullable); #> 
<# Row("bool", "OnlyObserved"); #>    
<# Row("string", "TaxonomicGroup"); #>
<# Row("string", "RelationType"); #>
<# Row("string", "Qualification"); #>
<# Row("string", "WorkingName"); #>
<# Row("string", "IdentificationUri"); #>
<# Row("DateTime", "AnalysisDate"); #>

<# Row("double?", "Altitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
<# Row("double?", "Latitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
<# Row("double?", "Longitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
 
<# Row("ModificationState", "ModificationState"); #>

		  
		public IdentificationUnit()
        {
            this.ModificationState = ModificationState.New;            

            this.AnalysisDate = DateTime.Now;//TODO Something useful?
            this.RelatedUnitID = null;
        }

        public static IQueryOperations<IdentificationUnit> Operations
        {
            get;
            private set;
        }

        static IdentificationUnit()
        {
            Operations = new QueryOperations<IdentificationUnit>(
                //Smallerthan
                          (q, iu) => q.Where(row => row.UnitID < iu.UnitID),
                //Equals
                          (q, iu) => q.Where(row => row.UnitID == iu.UnitID),
                //Orderby
                          (q) => q.OrderBy(iu => iu.UnitID),
                //FreeKey
                          (q, iu) =>
                          {
                              iu.UnitID = QueryOperations<IdentificationUnit>.FindFreeIntKey(q, row => row.UnitID);
                          });
        }

        public DBObjectType EntityType
        {
            get { return DBObjectType.IdentificationUnit; }
        }

        public int EntityID
        {
            get { return UnitID; }
        }
    }	
}
 
