<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="ReactiveModel.ttinclude" #>
<#@ import namespace="System" #>
<#
    
#>

using System;
using System.Linq;
using ReactiveUI;
using System.Data.Linq;
using System.Data.Linq.Mapping;

namespace DiversityPhone.Model
{	
	[Table]
	public class Event : ReactiveObject, ILocalizable, IModifyable, IMultimediaOwner
	{
#pragma warning disable 0169
		[Column(IsVersion = true)]
		private Binary version;
#pragma warning restore 0169

<# Row("int", "EventID", RowKind.Key); #>   
<# Row("int?", "CollectionEventID", RowKind.Nullable); #>   
<# Row("int?", "SeriesID", RowKind.Nullable); #>   
<# Row("DateTime", "CollectionDate", RowKind.NoUpdateCheck); #>    
<# Row("string", "LocalityDescription"); #>
<# Row("string", "HabitatDescription"); #>
<# Row("double?", "Altitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
<# Row("double?", "Latitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
<# Row("double?", "Longitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
<# Row("ModificationState", "ModificationState"); #>

		public Event()
        {
            this.SeriesID = null;
            this.CollectionDate = DateTime.Now;            
            this.ModificationState = ModificationState.New;
		}

       
        public static IQueryOperations<Event> Operations
        {
            get;
            private set;
        }

        static Event()
        {
            Operations = new QueryOperations<Event>(
                //Smallerthan
                          (q, ev) => q.Where(row => row.EventID < ev.EventID),
                //Equals
                          (q, ev) => q.Where(row => row.EventID == ev.EventID),
                //Orderby
                          (q) => q.OrderBy(ev => ev.EventID),
                //FreeKey
                          (q, ev) =>
                          {
                              ev.EventID = QueryOperations<Event>.FindFreeIntKey(q, row => row.EventID);
                          });
        }       

        public DBObjectType EntityType
        {
            get { return DBObjectType.Event; }
        }


        public int EntityID
        {
            get { return EventID; }
        }
    }	
}
 
