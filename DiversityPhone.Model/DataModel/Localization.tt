<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="ReactiveModel.ttinclude" #>
<#@ import namespace="System" #>
<#
   
#>

using System;
using System.Linq;
using ReactiveUI;
using System.Data.Linq.Mapping;
using System.Data.Linq;

namespace DiversityPhone.Model
{	
	[Table]
	public class Localization : ReactiveObject, IModifyable, ILocalizable
	{
#pragma warning disable 0169
		[Column(IsVersion = true)]
		private Binary version;
#pragma warning restore 0169

<# Row("int", "LocalizationID", RowKind.Key); #>   

<# Row("int", "RelatedID"); #>

<# Row("double?", "Altitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
<# Row("double?", "Latitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>    
<# Row("double?", "Longitude", RowKind.Nullable | RowKind.NoUpdateCheck); #>   
  
<# Row("ModificationState", "ModificationState"); #>

		public static IQueryOperations<Localization> Operations
        {
            get;
            private set;
        }

		static Localization()
        {
            Operations = new QueryOperations<Localization>(
                //Smallerthan
                          (q, gt) => q.Where(row => row.LocalizationID < gt.LocalizationID),
                //Equals
                          (q, gt) => q.Where(row => row.LocalizationID == gt.LocalizationID),
                //Orderby
                          (q) => q.OrderBy(gt => gt.LocalizationID),
                //FreeKey
                          (q, gt) =>
                          {
							  //As there is no corredponding table in DiversityCollection we choose to count up to model a sequence
                              gt.LocalizationID = QueryOperations<Localization>.FindFreeIntKeyUp(q, row => row.LocalizationID);
                          });
        }
	}
}
 
