<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="ReactiveModel.ttinclude" #>
<#@ import namespace="System" #>


using System;
using System.Linq;
using ReactiveUI;
using System.Data.Linq.Mapping;
using System.Data.Linq;

namespace DiversityPhone.Model
{	
	[Table]
	public class Specimen : ReactiveObject, IModifyable, IMultimediaOwner
	{
#pragma warning disable 0169
		[Column(IsVersion = true)]
		private Binary version;
#pragma warning restore 0169

<# Row("int", "SpecimenID", RowKind.Key); #>
<# Row("int?", "CollectionSpecimenID", RowKind.Nullable); #>   
<# Row("int", "EventID"); #>

<# Row("string", "AccessionNumber"); #>
 
<# Row("ModificationState", "ModificationState"); #>

        public Specimen()
        {
            this.AccessionNumber = null;            
            this.ModificationState = ModificationState.New;            
        }


        public static IQueryOperations<Specimen> Operations
        {
            get;
            private set;
        }

        static Specimen()
        {
            Operations = new QueryOperations<Specimen>(
                //Smallerthan
                          (q, spec) => q.Where(row => row.SpecimenID < spec.SpecimenID),
                //Equals
                          (q, spec) => q.Where(row => row.SpecimenID == spec.SpecimenID),
                //Orderby
                          (q) => q.OrderBy(spec => spec.SpecimenID),
                //FreeKey
                          (q, spec) =>
                          {
                              spec.SpecimenID = QueryOperations<Specimen>.FindFreeIntKey(q, row => row.SpecimenID);
                          });
        }

        public DBObjectType EntityType
        {
            get { return DBObjectType.Specimen; }
        }

        public int EntityID
        {
            get { return SpecimenID; }
        }
    }


    public static class SpecimenMixin
    {
        public static bool IsObservation(this Specimen spec)
        {
            return spec.AccessionNumber == null
                && !spec.IsNew();
        }

        public static Specimen MakeObservation(this Specimen spec)
        {
            spec.AccessionNumber = null;
            return spec;
        }
    }
} 