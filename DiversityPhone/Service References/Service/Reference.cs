//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.237
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace DiversityPhone.Service {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IDiversityService")]
    public interface IDiversityService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDiversityService/GetProjectsForUser", ReplyAction="http://tempuri.org/IDiversityService/GetProjectsForUserResponse")]
        System.IAsyncResult BeginGetProjectsForUser(DiversityService.Model.UserProfile user, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Project> EndGetProjectsForUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDiversityService/GetTaxonListsForUser", ReplyAction="http://tempuri.org/IDiversityService/GetTaxonListsForUserResponse")]
        System.IAsyncResult BeginGetTaxonListsForUser(DiversityService.Model.UserProfile user, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TermList> EndGetTaxonListsForUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDiversityService/GetStandardVocabulary", ReplyAction="http://tempuri.org/IDiversityService/GetStandardVocabularyResponse")]
        System.IAsyncResult BeginGetStandardVocabulary(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Term> EndGetStandardVocabulary(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDiversityService/DownloadTaxonList", ReplyAction="http://tempuri.org/IDiversityService/DownloadTaxonListResponse")]
        System.IAsyncResult BeginDownloadTaxonList(string list, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TaxonName> EndDownloadTaxonList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDiversityService/GetSeriesByDescription", ReplyAction="http://tempuri.org/IDiversityService/GetSeriesByDescriptionResponse")]
        System.IAsyncResult BeginGetSeriesByDescription(string description, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries> EndGetSeriesByDescription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDiversityService/AllEventSeries", ReplyAction="http://tempuri.org/IDiversityService/AllEventSeriesResponse")]
        System.IAsyncResult BeginAllEventSeries(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries> EndAllEventSeries(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDiversityServiceChannel : DiversityPhone.Service.IDiversityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProjectsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProjectsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Project> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Project>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTaxonListsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTaxonListsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TermList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TermList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStandardVocabularyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStandardVocabularyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Term> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Term>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadTaxonListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadTaxonListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TaxonName> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TaxonName>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSeriesByDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSeriesByDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AllEventSeriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AllEventSeriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiversityServiceClient : System.ServiceModel.ClientBase<DiversityPhone.Service.IDiversityService>, DiversityPhone.Service.IDiversityService {
        
        private BeginOperationDelegate onBeginGetProjectsForUserDelegate;
        
        private EndOperationDelegate onEndGetProjectsForUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetProjectsForUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTaxonListsForUserDelegate;
        
        private EndOperationDelegate onEndGetTaxonListsForUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetTaxonListsForUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStandardVocabularyDelegate;
        
        private EndOperationDelegate onEndGetStandardVocabularyDelegate;
        
        private System.Threading.SendOrPostCallback onGetStandardVocabularyCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadTaxonListDelegate;
        
        private EndOperationDelegate onEndDownloadTaxonListDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadTaxonListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSeriesByDescriptionDelegate;
        
        private EndOperationDelegate onEndGetSeriesByDescriptionDelegate;
        
        private System.Threading.SendOrPostCallback onGetSeriesByDescriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginAllEventSeriesDelegate;
        
        private EndOperationDelegate onEndAllEventSeriesDelegate;
        
        private System.Threading.SendOrPostCallback onAllEventSeriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DiversityServiceClient() {
        }
        
        public DiversityServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DiversityServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiversityServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiversityServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetProjectsForUserCompletedEventArgs> GetProjectsForUserCompleted;
        
        public event System.EventHandler<GetTaxonListsForUserCompletedEventArgs> GetTaxonListsForUserCompleted;
        
        public event System.EventHandler<GetStandardVocabularyCompletedEventArgs> GetStandardVocabularyCompleted;
        
        public event System.EventHandler<DownloadTaxonListCompletedEventArgs> DownloadTaxonListCompleted;
        
        public event System.EventHandler<GetSeriesByDescriptionCompletedEventArgs> GetSeriesByDescriptionCompleted;
        
        public event System.EventHandler<AllEventSeriesCompletedEventArgs> AllEventSeriesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DiversityPhone.Service.IDiversityService.BeginGetProjectsForUser(DiversityService.Model.UserProfile user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProjectsForUser(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Project> DiversityPhone.Service.IDiversityService.EndGetProjectsForUser(System.IAsyncResult result) {
            return base.Channel.EndGetProjectsForUser(result);
        }
        
        private System.IAsyncResult OnBeginGetProjectsForUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DiversityService.Model.UserProfile user = ((DiversityService.Model.UserProfile)(inValues[0]));
            return ((DiversityPhone.Service.IDiversityService)(this)).BeginGetProjectsForUser(user, callback, asyncState);
        }
        
        private object[] OnEndGetProjectsForUser(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Project> retVal = ((DiversityPhone.Service.IDiversityService)(this)).EndGetProjectsForUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProjectsForUserCompleted(object state) {
            if ((this.GetProjectsForUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProjectsForUserCompleted(this, new GetProjectsForUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProjectsForUserAsync(DiversityService.Model.UserProfile user) {
            this.GetProjectsForUserAsync(user, null);
        }
        
        public void GetProjectsForUserAsync(DiversityService.Model.UserProfile user, object userState) {
            if ((this.onBeginGetProjectsForUserDelegate == null)) {
                this.onBeginGetProjectsForUserDelegate = new BeginOperationDelegate(this.OnBeginGetProjectsForUser);
            }
            if ((this.onEndGetProjectsForUserDelegate == null)) {
                this.onEndGetProjectsForUserDelegate = new EndOperationDelegate(this.OnEndGetProjectsForUser);
            }
            if ((this.onGetProjectsForUserCompletedDelegate == null)) {
                this.onGetProjectsForUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProjectsForUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetProjectsForUserDelegate, new object[] {
                        user}, this.onEndGetProjectsForUserDelegate, this.onGetProjectsForUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DiversityPhone.Service.IDiversityService.BeginGetTaxonListsForUser(DiversityService.Model.UserProfile user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTaxonListsForUser(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TermList> DiversityPhone.Service.IDiversityService.EndGetTaxonListsForUser(System.IAsyncResult result) {
            return base.Channel.EndGetTaxonListsForUser(result);
        }
        
        private System.IAsyncResult OnBeginGetTaxonListsForUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DiversityService.Model.UserProfile user = ((DiversityService.Model.UserProfile)(inValues[0]));
            return ((DiversityPhone.Service.IDiversityService)(this)).BeginGetTaxonListsForUser(user, callback, asyncState);
        }
        
        private object[] OnEndGetTaxonListsForUser(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TermList> retVal = ((DiversityPhone.Service.IDiversityService)(this)).EndGetTaxonListsForUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTaxonListsForUserCompleted(object state) {
            if ((this.GetTaxonListsForUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTaxonListsForUserCompleted(this, new GetTaxonListsForUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTaxonListsForUserAsync(DiversityService.Model.UserProfile user) {
            this.GetTaxonListsForUserAsync(user, null);
        }
        
        public void GetTaxonListsForUserAsync(DiversityService.Model.UserProfile user, object userState) {
            if ((this.onBeginGetTaxonListsForUserDelegate == null)) {
                this.onBeginGetTaxonListsForUserDelegate = new BeginOperationDelegate(this.OnBeginGetTaxonListsForUser);
            }
            if ((this.onEndGetTaxonListsForUserDelegate == null)) {
                this.onEndGetTaxonListsForUserDelegate = new EndOperationDelegate(this.OnEndGetTaxonListsForUser);
            }
            if ((this.onGetTaxonListsForUserCompletedDelegate == null)) {
                this.onGetTaxonListsForUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTaxonListsForUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetTaxonListsForUserDelegate, new object[] {
                        user}, this.onEndGetTaxonListsForUserDelegate, this.onGetTaxonListsForUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DiversityPhone.Service.IDiversityService.BeginGetStandardVocabulary(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStandardVocabulary(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Term> DiversityPhone.Service.IDiversityService.EndGetStandardVocabulary(System.IAsyncResult result) {
            return base.Channel.EndGetStandardVocabulary(result);
        }
        
        private System.IAsyncResult OnBeginGetStandardVocabulary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((DiversityPhone.Service.IDiversityService)(this)).BeginGetStandardVocabulary(callback, asyncState);
        }
        
        private object[] OnEndGetStandardVocabulary(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Term> retVal = ((DiversityPhone.Service.IDiversityService)(this)).EndGetStandardVocabulary(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStandardVocabularyCompleted(object state) {
            if ((this.GetStandardVocabularyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStandardVocabularyCompleted(this, new GetStandardVocabularyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStandardVocabularyAsync() {
            this.GetStandardVocabularyAsync(null);
        }
        
        public void GetStandardVocabularyAsync(object userState) {
            if ((this.onBeginGetStandardVocabularyDelegate == null)) {
                this.onBeginGetStandardVocabularyDelegate = new BeginOperationDelegate(this.OnBeginGetStandardVocabulary);
            }
            if ((this.onEndGetStandardVocabularyDelegate == null)) {
                this.onEndGetStandardVocabularyDelegate = new EndOperationDelegate(this.OnEndGetStandardVocabulary);
            }
            if ((this.onGetStandardVocabularyCompletedDelegate == null)) {
                this.onGetStandardVocabularyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStandardVocabularyCompleted);
            }
            base.InvokeAsync(this.onBeginGetStandardVocabularyDelegate, null, this.onEndGetStandardVocabularyDelegate, this.onGetStandardVocabularyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DiversityPhone.Service.IDiversityService.BeginDownloadTaxonList(string list, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadTaxonList(list, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TaxonName> DiversityPhone.Service.IDiversityService.EndDownloadTaxonList(System.IAsyncResult result) {
            return base.Channel.EndDownloadTaxonList(result);
        }
        
        private System.IAsyncResult OnBeginDownloadTaxonList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string list = ((string)(inValues[0]));
            return ((DiversityPhone.Service.IDiversityService)(this)).BeginDownloadTaxonList(list, callback, asyncState);
        }
        
        private object[] OnEndDownloadTaxonList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TaxonName> retVal = ((DiversityPhone.Service.IDiversityService)(this)).EndDownloadTaxonList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownloadTaxonListCompleted(object state) {
            if ((this.DownloadTaxonListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadTaxonListCompleted(this, new DownloadTaxonListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadTaxonListAsync(string list) {
            this.DownloadTaxonListAsync(list, null);
        }
        
        public void DownloadTaxonListAsync(string list, object userState) {
            if ((this.onBeginDownloadTaxonListDelegate == null)) {
                this.onBeginDownloadTaxonListDelegate = new BeginOperationDelegate(this.OnBeginDownloadTaxonList);
            }
            if ((this.onEndDownloadTaxonListDelegate == null)) {
                this.onEndDownloadTaxonListDelegate = new EndOperationDelegate(this.OnEndDownloadTaxonList);
            }
            if ((this.onDownloadTaxonListCompletedDelegate == null)) {
                this.onDownloadTaxonListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadTaxonListCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadTaxonListDelegate, new object[] {
                        list}, this.onEndDownloadTaxonListDelegate, this.onDownloadTaxonListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DiversityPhone.Service.IDiversityService.BeginGetSeriesByDescription(string description, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSeriesByDescription(description, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries> DiversityPhone.Service.IDiversityService.EndGetSeriesByDescription(System.IAsyncResult result) {
            return base.Channel.EndGetSeriesByDescription(result);
        }
        
        private System.IAsyncResult OnBeginGetSeriesByDescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string description = ((string)(inValues[0]));
            return ((DiversityPhone.Service.IDiversityService)(this)).BeginGetSeriesByDescription(description, callback, asyncState);
        }
        
        private object[] OnEndGetSeriesByDescription(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries> retVal = ((DiversityPhone.Service.IDiversityService)(this)).EndGetSeriesByDescription(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSeriesByDescriptionCompleted(object state) {
            if ((this.GetSeriesByDescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSeriesByDescriptionCompleted(this, new GetSeriesByDescriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSeriesByDescriptionAsync(string description) {
            this.GetSeriesByDescriptionAsync(description, null);
        }
        
        public void GetSeriesByDescriptionAsync(string description, object userState) {
            if ((this.onBeginGetSeriesByDescriptionDelegate == null)) {
                this.onBeginGetSeriesByDescriptionDelegate = new BeginOperationDelegate(this.OnBeginGetSeriesByDescription);
            }
            if ((this.onEndGetSeriesByDescriptionDelegate == null)) {
                this.onEndGetSeriesByDescriptionDelegate = new EndOperationDelegate(this.OnEndGetSeriesByDescription);
            }
            if ((this.onGetSeriesByDescriptionCompletedDelegate == null)) {
                this.onGetSeriesByDescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSeriesByDescriptionCompleted);
            }
            base.InvokeAsync(this.onBeginGetSeriesByDescriptionDelegate, new object[] {
                        description}, this.onEndGetSeriesByDescriptionDelegate, this.onGetSeriesByDescriptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DiversityPhone.Service.IDiversityService.BeginAllEventSeries(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAllEventSeries(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries> DiversityPhone.Service.IDiversityService.EndAllEventSeries(System.IAsyncResult result) {
            return base.Channel.EndAllEventSeries(result);
        }
        
        private System.IAsyncResult OnBeginAllEventSeries(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((DiversityPhone.Service.IDiversityService)(this)).BeginAllEventSeries(callback, asyncState);
        }
        
        private object[] OnEndAllEventSeries(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries> retVal = ((DiversityPhone.Service.IDiversityService)(this)).EndAllEventSeries(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAllEventSeriesCompleted(object state) {
            if ((this.AllEventSeriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AllEventSeriesCompleted(this, new AllEventSeriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AllEventSeriesAsync() {
            this.AllEventSeriesAsync(null);
        }
        
        public void AllEventSeriesAsync(object userState) {
            if ((this.onBeginAllEventSeriesDelegate == null)) {
                this.onBeginAllEventSeriesDelegate = new BeginOperationDelegate(this.OnBeginAllEventSeries);
            }
            if ((this.onEndAllEventSeriesDelegate == null)) {
                this.onEndAllEventSeriesDelegate = new EndOperationDelegate(this.OnEndAllEventSeries);
            }
            if ((this.onAllEventSeriesCompletedDelegate == null)) {
                this.onAllEventSeriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAllEventSeriesCompleted);
            }
            base.InvokeAsync(this.onBeginAllEventSeriesDelegate, null, this.onEndAllEventSeriesDelegate, this.onAllEventSeriesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override DiversityPhone.Service.IDiversityService CreateChannel() {
            return new DiversityServiceClientChannel(this);
        }
        
        private class DiversityServiceClientChannel : ChannelBase<DiversityPhone.Service.IDiversityService>, DiversityPhone.Service.IDiversityService {
            
            public DiversityServiceClientChannel(System.ServiceModel.ClientBase<DiversityPhone.Service.IDiversityService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetProjectsForUser(DiversityService.Model.UserProfile user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("GetProjectsForUser", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Project> EndGetProjectsForUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Project> _result = ((System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Project>)(base.EndInvoke("GetProjectsForUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTaxonListsForUser(DiversityService.Model.UserProfile user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("GetTaxonListsForUser", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TermList> EndGetTaxonListsForUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TermList> _result = ((System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TermList>)(base.EndInvoke("GetTaxonListsForUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStandardVocabulary(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetStandardVocabulary", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Term> EndGetStandardVocabulary(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Term> _result = ((System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.Term>)(base.EndInvoke("GetStandardVocabulary", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDownloadTaxonList(string list, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = list;
                System.IAsyncResult _result = base.BeginInvoke("DownloadTaxonList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TaxonName> EndDownloadTaxonList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TaxonName> _result = ((System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.TaxonName>)(base.EndInvoke("DownloadTaxonList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSeriesByDescription(string description, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = description;
                System.IAsyncResult _result = base.BeginInvoke("GetSeriesByDescription", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries> EndGetSeriesByDescription(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries> _result = ((System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries>)(base.EndInvoke("GetSeriesByDescription", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAllEventSeries(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("AllEventSeries", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries> EndAllEventSeries(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries> _result = ((System.Collections.ObjectModel.ObservableCollection<DiversityService.Model.EventSeries>)(base.EndInvoke("AllEventSeries", _args, result)));
                return _result;
            }
        }
    }
}
